//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace Tracker.SqlServer.CodeFirst.Mapping
{
    public partial class AuditMap
        : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Tracker.SqlServer.CodeFirst.Entities.AuditData>
    {
        public AuditMap()
        {
            // table
            ToTable("Audit", "dbo");

            // keys
            HasKey(t => t.Id);

            // Properties
            Property(t => t.Id)
                .HasColumnName("Id")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)
                .IsRequired();
            Property(t => t.Date)
                .HasColumnName("Date")
                .IsRequired();
            Property(t => t.UserId)
                .HasColumnName("UserId")
                .IsOptional();
            Property(t => t.TaskId)
                .HasColumnName("TaskId")
                .IsOptional();
            Property(t => t.Content)
                .HasColumnName("Content")
                .IsRequired();
            Property(t => t.Username)
                .HasColumnName("Username")
                .IsRequired();
            Property(t => t.CreatedDate)
                .HasColumnName("CreatedDate")
                .IsRequired();
            Property(t => t.RowVersion)
                .HasColumnName("RowVersion")
                .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)
                .IsRowVersion()
                .IsRequired();

            // Relationships
            HasOptional(t => t.Task)
                .WithMany(t => t.Audits)
                .HasForeignKey(d => d.TaskId);
            HasOptional(t => t.User)
                .WithMany(t => t.Audits)
                .HasForeignKey(d => d.UserId);

            InitializeMapping();
        }
    }
}

